"""empty message

Revision ID: 575870c8a374
Revises: 5e2308353448
Create Date: 2021-08-26 13:58:26.724500

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '575870c8a374'
down_revision = '5e2308353448'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table_comment(
        'mo_was_instance_status',
        'WAS instance 상태',
        existing_comment=None,
        schema=None
    )
    op.create_table_comment(
        'mo_was_status_report',
        'WAS instance 상태 report',
        existing_comment=None,
        schema=None
    )
    op.create_table_comment(
        'mo_was_status_template',
        'WAS instance 상태 report template',
        existing_comment=None,
        schema=None
    )
    op.alter_column('mw_application', 'id',
               existing_type=sa.INTEGER(),
               comment='Primary Key',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('mw_application_id_seq'::regclass)"))
    op.alter_column('mw_application', 'was_id',
               existing_type=sa.VARCHAR(length=30),
               comment='WAS domain id',
               existing_nullable=False)
    op.alter_column('mw_application', 'application_id',
               existing_type=sa.VARCHAR(length=30),
               comment='Application id',
               existing_nullable=False)
    op.alter_column('mw_application', 'application_desc',
               existing_type=sa.VARCHAR(length=30),
               comment='Application 설명',
               existing_nullable=True)
    op.alter_column('mw_application', 'application_home',
               existing_type=sa.VARCHAR(length=200),
               comment='Application 배포 위치',
               existing_nullable=True)
    op.alter_column('mw_application', 'context_path',
               existing_type=sa.VARCHAR(length=200),
               comment='Context Path',
               existing_nullable=True)
    op.alter_column('mw_application', 'deploy_type',
               existing_type=postgresql.ENUM('WAR', 'EAR', 'JAR', 'COMPONENT', 'EXPLODED', name='warenum'),
               comment='배포Type',
               existing_nullable=True)
    op.create_table_comment(
        'mw_application',
        'WAS에 deploy된 Application',
        existing_comment=None,
        schema=None
    )
    op.alter_column('mw_biz_category', 'id',
               existing_type=sa.INTEGER(),
               comment='Primary Key',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('mw_biz_category_id_seq'::regclass)"))
    op.create_table_comment(
        'mw_biz_category',
        'KDB Application code',
        existing_comment=None,
        schema=None
    )
    op.alter_column('mw_datasource', 'id',
               existing_type=sa.INTEGER(),
               comment='Primary Key',
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('mw_datasource', 'was_id',
               existing_type=sa.VARCHAR(length=30),
               comment='WAS domain id',
               existing_nullable=False)
    op.alter_column('mw_datasource', 'datasource_id',
               existing_type=sa.VARCHAR(length=50),
               comment='Datasource id',
               existing_nullable=False)
    op.alter_column('mw_datasource', 'db_jndi_id',
               existing_type=sa.VARCHAR(length=50),
               comment='Export(JNDI) 이름',
               existing_nullable=True)
    op.alter_column('mw_datasource', 'datasource_type',
               existing_type=sa.VARCHAR(length=50),
               comment='Datasource Type',
               existing_nullable=True)
    op.alter_column('mw_datasource', 'datasource_class_name',
               existing_type=sa.VARCHAR(length=200),
               comment='JDBC Class',
               existing_nullable=True)
    op.alter_column('mw_datasource', 'vender_name',
               existing_type=sa.VARCHAR(length=50),
               comment='Vendor',
               existing_nullable=True)
    op.alter_column('mw_datasource', 'db_server_name',
               existing_type=sa.VARCHAR(length=50),
               comment='DB Server',
               existing_nullable=True)
    op.alter_column('mw_datasource', 'db_server_port',
               existing_type=sa.INTEGER(),
               comment='DB Service port',
               existing_nullable=True)
    op.alter_column('mw_datasource', 'db_dbms_id',
               existing_type=sa.VARCHAR(length=50),
               comment='DBMS id',
               existing_nullable=True)
    op.alter_column('mw_datasource', 'db_user_id',
               existing_type=sa.VARCHAR(length=30),
               comment='DBMS user',
               existing_nullable=True)
    op.alter_column('mw_datasource', 'db_property',
               existing_type=sa.VARCHAR(length=1000),
               comment='DBMS 접속정보',
               existing_nullable=True)
    op.alter_column('mw_datasource', 'stmt_query_timeout',
               existing_type=sa.INTEGER(),
               comment='SQL timeout',
               existing_nullable=True)
    op.alter_column('mw_datasource', 'db_pool_min',
               existing_type=sa.INTEGER(),
               comment='DB Pool Min',
               existing_nullable=True)
    op.alter_column('mw_datasource', 'db_pool_max',
               existing_type=sa.INTEGER(),
               comment='DB Pool Max',
               existing_nullable=True)
    op.alter_column('mw_datasource', 'db_pool_step',
               existing_type=sa.INTEGER(),
               comment='DB Pool Step',
               existing_nullable=True)
    op.alter_column('mw_datasource', 'db_pool_period',
               existing_type=sa.INTEGER(),
               comment='DB Pool Period',
               existing_nullable=True)
    op.create_table_comment(
        'mw_datasource',
        'WAS의 Datasource',
        existing_comment=None,
        schema=None
    )
    op.alter_column('mw_server', 'id',
               existing_type=sa.INTEGER(),
               comment='Primary Key',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('mw_server_id_seq'::regclass)"))
    op.alter_column('mw_server', 'host_id',
               existing_type=sa.VARCHAR(length=30),
               comment='HOST ID',
               existing_nullable=False)
    op.alter_column('mw_server', 'landscape',
               existing_type=postgresql.ENUM('PROD', 'TEST', 'DEV', 'DR', name='locationenum'),
               comment='Landscape',
               existing_nullable=True)
    op.alter_column('mw_server', 'os_type',
               existing_type=postgresql.ENUM('AIX', 'LINUX', 'WINDOWS', 'HPUX', 'ETC', name='osenum'),
               comment='OS 종류',
               existing_nullable=True)
    op.alter_column('mw_server', 'encoding',
               existing_type=postgresql.ENUM('UTF_8', 'EUC_KR', 'UTF_16', 'ANSI', 'CP949', name='encodingenum'),
               comment='엔코딩',
               existing_nullable=True)
    op.alter_column('mw_server', 'ip_address',
               existing_type=sa.VARCHAR(length=20),
               comment='IP address',
               existing_nullable=True)
    op.alter_column('mw_server', 'vip_address',
               existing_type=sa.VARCHAR(length=100),
               comment='접근 가능한 모든 IP address들',
               existing_nullable=True)
    op.create_table_comment(
        'mw_server',
        'Server Master',
        existing_comment=None,
        schema=None
    )
    op.alter_column('mw_was', 'id',
               existing_type=sa.INTEGER(),
               comment='Primary Key',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('mw_was_id_seq'::regclass)"))
    op.alter_column('mw_was', 'was_id',
               existing_type=sa.VARCHAR(length=30),
               comment='WAS domain id',
               existing_nullable=False)
    op.alter_column('mw_was', 'was_name',
               existing_type=sa.VARCHAR(length=50),
               comment='WAS 이름/용도',
               existing_nullable=True)
    op.alter_column('mw_was', 'newgeneration_yn',
               existing_type=postgresql.ENUM('YES', 'NO', name='ynenum'),
               comment='차세대여부',
               existing_nullable=True)
    op.alter_column('mw_was', 'adminserver_name',
               existing_type=sa.VARCHAR(length=30),
               comment='adminserver 이름',
               existing_nullable=True)
    op.alter_column('mw_was', 'was_home',
               existing_type=sa.VARCHAR(length=200),
               comment='JEUS home',
               existing_nullable=True)
    op.alter_column('mw_was', 'log_home',
               existing_type=sa.VARCHAR(length=200),
               comment='JEUS log home',
               existing_nullable=True)
    op.alter_column('mw_was', 'landscape',
               existing_type=postgresql.ENUM('PROD', 'TEST', 'DEV', 'DR', name='locationenum'),
               comment='Landscape',
               existing_nullable=True)
    op.alter_column('mw_was', 'running_type',
               existing_type=postgresql.ENUM('AA', 'AS', 'SA', name='runingtypeenum'),
               comment='HA구성',
               existing_nullable=True)
    op.alter_column('mw_was', 'standby_host_id',
               existing_type=sa.VARCHAR(length=30),
               comment='HA구성이 A-S인 경우 StandBy 서버 Host id',
               existing_nullable=True)
    op.alter_column('mw_was', 'located_host_id',
               existing_type=sa.VARCHAR(length=30),
               comment='설치서버',
               existing_nullable=False)
    op.alter_column('mw_was', 'system_user',
               existing_type=sa.VARCHAR(length=50),
               comment='서버 계정',
               existing_nullable=True)
    op.alter_column('mw_was', 'user_name_incharge',
               existing_type=sa.VARCHAR(length=50),
               comment='담당자 이름',
               existing_nullable=True)
    op.alter_column('mw_was', 'cluster_object',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='Clustering 정보',
               existing_nullable=True)
    op.alter_column('mw_was', 'was_object',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='domain.xml 또는 JEUSMain.xml 전체 정보',
               existing_nullable=True)
    op.create_table_comment(
        'mw_was',
        'WAS domain',
        existing_comment=None,
        schema=None
    )
    op.alter_column('mw_was_change_history', 'id',
               existing_type=sa.INTEGER(),
               comment='Primary Key',
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('mw_was_change_history', 'was_id',
               existing_type=sa.VARCHAR(length=30),
               comment='WAS domain id',
               existing_nullable=False)
    op.alter_column('mw_was_change_history', 'old_was_object',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='변경전 WAS 정보',
               existing_nullable=True)
    op.alter_column('mw_was_change_history', 'changed_object',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='변경 내역',
               existing_nullable=True)
    op.create_table_comment(
        'mw_was_change_history',
        'WAS 변경 이력',
        existing_comment=None,
        schema=None
    )
    op.alter_column('mw_was_httplistener', 'id',
               existing_type=sa.INTEGER(),
               comment='Primary Key',
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('mw_was_httplistener', 'was_id',
               existing_type=sa.VARCHAR(length=30),
               comment='WAS domain id',
               existing_nullable=False)
    op.alter_column('mw_was_httplistener', 'was_instance_id',
               existing_type=sa.VARCHAR(length=30),
               comment='WAS instance id',
               existing_nullable=False)
    op.alter_column('mw_was_httplistener', 'webconnection_id',
               existing_type=sa.VARCHAR(length=30),
               comment='Web Connector ID',
               existing_nullable=False)
    op.alter_column('mw_was_httplistener', 'listen_port',
               existing_type=sa.INTEGER(),
               comment='listener port',
               existing_nullable=False)
    op.alter_column('mw_was_httplistener', 'min_thread_pool_count',
               existing_type=sa.INTEGER(),
               comment='Http Thread min 개수',
               existing_nullable=True)
    op.alter_column('mw_was_httplistener', 'max_thread_pool_count',
               existing_type=sa.INTEGER(),
               comment='Http Thread max 개수',
               existing_nullable=True)
    op.alter_column('mw_was_httplistener', 'httplistener_object',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='httplistener 정보',
               existing_nullable=True)
    op.create_table_comment(
        'mw_was_httplistener',
        'WAS instance의 http listener',
        existing_comment=None,
        schema=None
    )
    op.alter_column('mw_was_instance', 'id',
               existing_type=sa.INTEGER(),
               comment='Primary Key',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('mw_was_instance_id_seq'::regclass)"))
    op.alter_column('mw_was_instance', 'was_id',
               existing_type=sa.VARCHAR(length=30),
               comment='WAS domain id',
               existing_nullable=False)
    op.alter_column('mw_was_instance', 'was_instance_id',
               existing_type=sa.VARCHAR(length=30),
               comment='WAS instance id',
               existing_nullable=False)
    op.alter_column('mw_was_instance', 'was_instance_port',
               existing_type=sa.INTEGER(),
               comment='서비스Port',
               existing_nullable=True)
    op.alter_column('mw_was_instance', 'was_instance_name',
               existing_type=sa.VARCHAR(length=50),
               comment='Instance명/업무명',
               existing_nullable=True)
    op.alter_column('mw_was_instance', 'host_id',
               existing_type=sa.VARCHAR(length=30),
               comment='HOST ID',
               existing_nullable=False)
    op.alter_column('mw_was_instance', 'min_heap_size',
               existing_type=sa.INTEGER(),
               comment='Min Heap size',
               existing_nullable=True)
    op.alter_column('mw_was_instance', 'max_heap_size',
               existing_type=sa.INTEGER(),
               comment='Max Heap size',
               existing_nullable=True)
    op.alter_column('mw_was_instance', 'file_encoding',
               existing_type=postgresql.ENUM('UTF_8', 'EUC_KR', 'UTF_16', 'ANSI', 'CP949', name='encodingenum'),
               comment='File Encoding type',
               existing_nullable=True)
    op.alter_column('mw_was_instance', 'jvm_option',
               existing_type=sa.VARCHAR(length=2000),
               comment='JVM Option',
               existing_nullable=True)
    op.alter_column('mw_was_instance', 'log_home',
               existing_type=sa.VARCHAR(length=500),
               comment='JEUS log home',
               existing_nullable=True)
    op.alter_column('mw_was_instance', 'engine_command',
               existing_type=sa.VARCHAR(length=30),
               comment='JEUS6 전용 WEBMain.xml 식별정보',
               existing_nullable=True)
    op.alter_column('mw_was_instance', 'apm_type',
               existing_type=postgresql.ENUM('PHAROS', 'JENNIFER', 'NONE', name='apmenum'),
               comment='APM 종류',
               existing_nullable=False,
               existing_server_default=sa.text("'NONE'::apmenum"))
    op.alter_column('mw_was_instance', 'use_yn',
               existing_type=postgresql.ENUM('YES', 'NO', name='ynenum'),
               comment='사용여부',
               existing_nullable=False,
               existing_server_default=sa.text("'YES'::ynenum"))
    op.alter_column('mw_was_instance', 'clustered_yn',
               existing_type=postgresql.ENUM('YES', 'NO', name='ynenum'),
               comment='Clustering여부',
               existing_nullable=True)
    op.create_table_comment(
        'mw_was_instance',
        'WAS instance',
        existing_comment=None,
        schema=None
    )
    op.alter_column('mw_was_webtobconnector', 'id',
               existing_type=sa.INTEGER(),
               comment='Primary Key',
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('mw_was_webtobconnector', 'was_id',
               existing_type=sa.VARCHAR(length=30),
               comment='WAS domain id',
               existing_nullable=False)
    op.alter_column('mw_was_webtobconnector', 'was_instance_id',
               existing_type=sa.VARCHAR(length=30),
               comment='WAS instance id',
               existing_nullable=False)
    op.alter_column('mw_was_webtobconnector', 'webconnection_id',
               existing_type=sa.VARCHAR(length=30),
               comment='Web Connector ID',
               existing_nullable=False)
    op.alter_column('mw_was_webtobconnector', 'web_host_id',
               existing_type=sa.VARCHAR(length=30),
               comment='Web서버',
               existing_nullable=True)
    op.alter_column('mw_was_webtobconnector', 'web_home',
               existing_type=sa.VARCHAR(length=100),
               comment='Web서버 local home',
               existing_nullable=True)
    op.alter_column('mw_was_webtobconnector', 'jsv_port',
               existing_type=sa.INTEGER(),
               comment='JSV port',
               existing_nullable=False)
    op.alter_column('mw_was_webtobconnector', 'jsv_id',
               existing_type=sa.VARCHAR(length=30),
               comment='JSV Id',
               existing_nullable=True)
    op.alter_column('mw_was_webtobconnector', 'web_hth_count',
               existing_type=sa.INTEGER(),
               comment='Web서버 hth 개수',
               existing_nullable=True)
    op.alter_column('mw_was_webtobconnector', 'web_reconnect_interval',
               existing_type=sa.INTEGER(),
               comment='Reconnect interval',
               existing_nullable=True)
    op.alter_column('mw_was_webtobconnector', 'thread_pool_count',
               existing_type=sa.INTEGER(),
               comment='Http Thread 최대개수',
               existing_nullable=True)
    op.alter_column('mw_was_webtobconnector', 'disable_pipe',
               existing_type=postgresql.ENUM('YES', 'NO', name='ynenum'),
               comment='내장Webtob pipeline사용구분(사용시=false)',
               existing_nullable=True)
    op.alter_column('mw_was_webtobconnector', 'webtobconnector_object',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='webconnection 정보',
               existing_nullable=True)
    op.create_table_comment(
        'mw_was_webtobconnector',
        'WAS instance의 webtob connection',
        existing_comment=None,
        schema=None
    )
    op.alter_column('mw_web', 'id',
               existing_type=sa.INTEGER(),
               comment='Primary Key',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('mw_web_id_seq'::regclass)"))
    op.alter_column('mw_web', 'host_id',
               existing_type=sa.VARCHAR(length=30),
               comment='HOST ID',
               existing_nullable=False)
    op.alter_column('mw_web', 'jsv_port',
               existing_type=sa.INTEGER(),
               comment='JSV Port',
               existing_nullable=False)
    op.alter_column('mw_web', 'built_type',
               existing_type=postgresql.ENUM('External', 'Internal', 'Isolated', name='builtenum'),
               comment='Built Type',
               existing_nullable=True)
    op.alter_column('mw_web', 'dependent_was_id',
               existing_type=sa.VARCHAR(length=30),
               comment='Built type이 내장인 경우 종속된 WAS domain id',
               existing_nullable=True)
    op.alter_column('mw_web', 'landscape',
               existing_type=postgresql.ENUM('PROD', 'TEST', 'DEV', 'DR', name='locationenum'),
               comment='Landscape',
               existing_nullable=True)
    op.alter_column('mw_web', 'newgeneration_yn',
               existing_type=postgresql.ENUM('YES', 'NO', name='ynenum'),
               comment='차세대여부',
               existing_nullable=True)
    op.alter_column('mw_web', 'hth_count',
               existing_type=sa.INTEGER(),
               comment='hth count',
               existing_nullable=True)
    op.alter_column('mw_web', 'service_port',
               existing_type=sa.INTEGER(),
               comment='http service port',
               existing_nullable=True)
    op.alter_column('mw_web', 'node_name',
               existing_type=sa.VARCHAR(length=100),
               comment='node name in http.m',
               existing_nullable=True)
    op.alter_column('mw_web', 'web_name',
               existing_type=sa.VARCHAR(length=50),
               comment='web서버 이름/용도',
               existing_nullable=True)
    op.alter_column('mw_web', 'web_home',
               existing_type=sa.VARCHAR(length=200),
               comment='web서버 home',
               existing_nullable=True)
    op.alter_column('mw_web', 'doc_dir',
               existing_type=sa.VARCHAR(length=200),
               comment='doc root 위치',
               existing_nullable=True)
    op.alter_column('mw_web', 'acc_dir',
               existing_type=sa.VARCHAR(length=200),
               comment='access log 위치',
               existing_nullable=True)
    op.alter_column('mw_web', 'system_user',
               existing_type=sa.VARCHAR(length=50),
               comment='서버 계정',
               existing_nullable=True)
    op.alter_column('mw_web', 'running_type',
               existing_type=postgresql.ENUM('AA', 'AS', 'SA', name='runingtypeenum'),
               comment='HA구성',
               existing_nullable=True)
    op.alter_column('mw_web', 'standby_host_id',
               existing_type=sa.VARCHAR(length=30),
               comment='HA구성이 A-S인 경우 StandBy 서버 Host id',
               existing_nullable=True)
    op.alter_column('mw_web', 'user_name_incharge',
               existing_type=sa.VARCHAR(length=50),
               comment='담당자 이름',
               existing_nullable=True)
    op.alter_column('mw_web', 'ssl_object',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='SSL 인증서 정보',
               existing_nullable=True)
    op.alter_column('mw_web', 'logging_object',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='Logging 정보',
               existing_nullable=True)
    op.alter_column('mw_web', 'errordocument_object',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='error document 정보',
               existing_nullable=True)
    op.alter_column('mw_web', 'ext_object',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='ext 정보',
               existing_nullable=True)
    op.alter_column('mw_web', 'tcpgw_object',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='TCP Gateway 정보',
               existing_nullable=True)
    op.alter_column('mw_web', 'httpm_object',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='http.m 전체 정보',
               existing_nullable=True)
    op.create_table_comment(
        'mw_web',
        'Web 서버',
        existing_comment=None,
        schema=None
    )
    op.alter_column('mw_web_change_history', 'id',
               existing_type=sa.INTEGER(),
               comment='Primary Key',
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('mw_web_change_history', 'host_id',
               existing_type=sa.VARCHAR(length=30),
               comment='HOST ID',
               existing_nullable=False)
    op.alter_column('mw_web_change_history', 'jsv_port',
               existing_type=sa.INTEGER(),
               comment='JSV Port',
               existing_nullable=False)
    op.alter_column('mw_web_change_history', 'old_httpm_object',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='변경전 http.m 정보',
               existing_nullable=True)
    op.alter_column('mw_web_change_history', 'changed_object',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='변경 내역',
               existing_nullable=True)
    op.create_table_comment(
        'mw_web_change_history',
        'WEB 변경 이력',
        existing_comment=None,
        schema=None
    )
    op.alter_column('mw_web_reverseproxy', 'id',
               existing_type=sa.INTEGER(),
               comment='Primary Key',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('mw_web_reverseproxy_id_seq'::regclass)"))
    op.alter_column('mw_web_reverseproxy', 'host_id',
               existing_type=sa.VARCHAR(length=30),
               comment='HOST ID',
               existing_nullable=False)
    op.alter_column('mw_web_reverseproxy', 'jsv_port',
               existing_type=sa.INTEGER(),
               comment='JSV Port',
               existing_nullable=False)
    op.alter_column('mw_web_reverseproxy', 'reverseproxy_id',
               existing_type=sa.VARCHAR(length=30),
               comment='Reverse Proxy ID',
               existing_nullable=False)
    op.alter_column('mw_web_reverseproxy', 'context_path',
               existing_type=sa.VARCHAR(length=100),
               comment='Context Path',
               existing_nullable=True)
    op.alter_column('mw_web_reverseproxy', 'ssl_yn',
               existing_type=postgresql.ENUM('YES', 'NO', name='ynenum'),
               comment='SSL 인증서 여부',
               existing_nullable=True)
    op.alter_column('mw_web_reverseproxy', 'target_ip_address',
               existing_type=sa.VARCHAR(length=100),
               comment='Reverse Proxy target ip',
               existing_nullable=True)
    op.alter_column('mw_web_reverseproxy', 'target_port',
               existing_type=sa.INTEGER(),
               comment='Reverse Proxy target port',
               existing_nullable=True)
    op.alter_column('mw_web_reverseproxy', 'target_context_path',
               existing_type=sa.VARCHAR(length=100),
               comment='Reverse Proxy target context path',
               existing_nullable=True)
    op.alter_column('mw_web_reverseproxy', 'max_connection_count',
               existing_type=sa.INTEGER(),
               comment='Max WebSocketConnections',
               existing_nullable=True)
    op.create_table_comment(
        'mw_web_reverseproxy',
        'http.m reverse proxy정보',
        existing_comment=None,
        schema=None
    )
    op.alter_column('mw_web_server', 'id',
               existing_type=sa.INTEGER(),
               comment='Primary Key',
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('mw_web_server', 'host_id',
               existing_type=sa.VARCHAR(length=30),
               comment='HOST ID',
               existing_nullable=False)
    op.alter_column('mw_web_server', 'jsv_port',
               existing_type=sa.INTEGER(),
               comment='JSV Port',
               existing_nullable=False)
    op.alter_column('mw_web_server', 'svr_id',
               existing_type=sa.VARCHAR(length=30),
               comment='Server ID(JSV ID와 일치)',
               existing_nullable=False)
    op.alter_column('mw_web_server', 'svr_type',
               existing_type=postgresql.ENUM('HTML', 'JSV', 'CGI', 'SSI', name='svrtypeenum'),
               comment='Server Type',
               existing_nullable=True)
    op.alter_column('mw_web_server', 'min_proc_count',
               existing_type=sa.INTEGER(),
               comment='Process min 개수',
               existing_nullable=True)
    op.alter_column('mw_web_server', 'max_proc_count',
               existing_type=sa.INTEGER(),
               comment='Process max 개수',
               existing_nullable=True)
    op.alter_column('mw_web_server', 'request_level_ping_yn',
               existing_type=postgresql.ENUM('YES', 'NO', name='ynenum'),
               comment='Request Level Ping 여부',
               existing_nullable=True)
    op.create_table_comment(
        'mw_web_server',
        'http.m server정보',
        existing_comment=None,
        schema=None
    )
    op.alter_column('mw_web_uri', 'id',
               existing_type=sa.INTEGER(),
               comment='Primary Key',
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('mw_web_uri', 'host_id',
               existing_type=sa.VARCHAR(length=30),
               comment='HOST ID',
               existing_nullable=False)
    op.alter_column('mw_web_uri', 'jsv_port',
               existing_type=sa.INTEGER(),
               comment='JSV Port',
               existing_nullable=False)
    op.alter_column('mw_web_uri', 'uri_id',
               existing_type=sa.VARCHAR(length=30),
               comment='URI 이름',
               existing_nullable=False)
    op.alter_column('mw_web_uri', 'svr_type',
               existing_type=postgresql.ENUM('HTML', 'JSV', 'CGI', 'SSI', name='svrtypeenum'),
               comment='Server Type',
               existing_nullable=True)
    op.alter_column('mw_web_uri', 'uri',
               existing_type=sa.VARCHAR(length=500),
               comment='URI',
               existing_nullable=False)
    op.create_table_comment(
        'mw_web_uri',
        'http.m uri정보',
        existing_comment=None,
        schema=None
    )
    op.alter_column('mw_web_vhost', 'id',
               existing_type=sa.INTEGER(),
               comment='Primary Key',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('mw_web_vhost_id_seq'::regclass)"))
    op.alter_column('mw_web_vhost', 'host_id',
               existing_type=sa.VARCHAR(length=30),
               comment='HOST ID',
               existing_nullable=False)
    op.alter_column('mw_web_vhost', 'jsv_port',
               existing_type=sa.INTEGER(),
               comment='JSV Port',
               existing_nullable=False)
    op.alter_column('mw_web_vhost', 'vhost_id',
               existing_type=sa.VARCHAR(length=30),
               comment='Virtual Host ID',
               existing_nullable=False)
    op.alter_column('mw_web_vhost', 'web_ports',
               existing_type=sa.VARCHAR(length=100),
               comment='서비스 port',
               existing_nullable=True)
    op.alter_column('mw_web_vhost', 'domain_name',
               existing_type=sa.VARCHAR(length=100),
               comment='Domain 이름',
               existing_nullable=True)
    op.alter_column('mw_web_vhost', 'host_alias',
               existing_type=sa.VARCHAR(length=500),
               comment='HOST ALIAS',
               existing_nullable=True)
    op.alter_column('mw_web_vhost', 'doc_dir',
               existing_type=sa.VARCHAR(length=200),
               comment='DOC root',
               existing_nullable=True)
    op.alter_column('mw_web_vhost', 'acc_dir',
               existing_type=sa.VARCHAR(length=200),
               comment='Access log 위치',
               existing_nullable=True)
    op.alter_column('mw_web_vhost', 'ssl_yn',
               existing_type=postgresql.ENUM('YES', 'NO', name='ynenum'),
               comment='SSL 인증서 여부',
               existing_nullable=True)
    op.create_table_comment(
        'mw_web_vhost',
        'http.m virtual host정보',
        existing_comment=None,
        schema=None
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table_comment(
        'mw_web_vhost',
        existing_comment='http.m virtual host정보',
        schema=None
    )
    op.alter_column('mw_web_vhost', 'ssl_yn',
               existing_type=postgresql.ENUM('YES', 'NO', name='ynenum'),
               comment=None,
               existing_comment='SSL 인증서 여부',
               existing_nullable=True)
    op.alter_column('mw_web_vhost', 'acc_dir',
               existing_type=sa.VARCHAR(length=200),
               comment=None,
               existing_comment='Access log 위치',
               existing_nullable=True)
    op.alter_column('mw_web_vhost', 'doc_dir',
               existing_type=sa.VARCHAR(length=200),
               comment=None,
               existing_comment='DOC root',
               existing_nullable=True)
    op.alter_column('mw_web_vhost', 'host_alias',
               existing_type=sa.VARCHAR(length=500),
               comment=None,
               existing_comment='HOST ALIAS',
               existing_nullable=True)
    op.alter_column('mw_web_vhost', 'domain_name',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Domain 이름',
               existing_nullable=True)
    op.alter_column('mw_web_vhost', 'web_ports',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='서비스 port',
               existing_nullable=True)
    op.alter_column('mw_web_vhost', 'vhost_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='Virtual Host ID',
               existing_nullable=False)
    op.alter_column('mw_web_vhost', 'jsv_port',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='JSV Port',
               existing_nullable=False)
    op.alter_column('mw_web_vhost', 'host_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='HOST ID',
               existing_nullable=False)
    op.alter_column('mw_web_vhost', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Primary Key',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('mw_web_vhost_id_seq'::regclass)"))
    op.drop_table_comment(
        'mw_web_uri',
        existing_comment='http.m uri정보',
        schema=None
    )
    op.alter_column('mw_web_uri', 'uri',
               existing_type=sa.VARCHAR(length=500),
               comment=None,
               existing_comment='URI',
               existing_nullable=False)
    op.alter_column('mw_web_uri', 'svr_type',
               existing_type=postgresql.ENUM('HTML', 'JSV', 'CGI', 'SSI', name='svrtypeenum'),
               comment=None,
               existing_comment='Server Type',
               existing_nullable=True)
    op.alter_column('mw_web_uri', 'uri_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='URI 이름',
               existing_nullable=False)
    op.alter_column('mw_web_uri', 'jsv_port',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='JSV Port',
               existing_nullable=False)
    op.alter_column('mw_web_uri', 'host_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='HOST ID',
               existing_nullable=False)
    op.alter_column('mw_web_uri', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Primary Key',
               existing_nullable=False,
               autoincrement=True)
    op.drop_table_comment(
        'mw_web_server',
        existing_comment='http.m server정보',
        schema=None
    )
    op.alter_column('mw_web_server', 'request_level_ping_yn',
               existing_type=postgresql.ENUM('YES', 'NO', name='ynenum'),
               comment=None,
               existing_comment='Request Level Ping 여부',
               existing_nullable=True)
    op.alter_column('mw_web_server', 'max_proc_count',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Process max 개수',
               existing_nullable=True)
    op.alter_column('mw_web_server', 'min_proc_count',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Process min 개수',
               existing_nullable=True)
    op.alter_column('mw_web_server', 'svr_type',
               existing_type=postgresql.ENUM('HTML', 'JSV', 'CGI', 'SSI', name='svrtypeenum'),
               comment=None,
               existing_comment='Server Type',
               existing_nullable=True)
    op.alter_column('mw_web_server', 'svr_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='Server ID(JSV ID와 일치)',
               existing_nullable=False)
    op.alter_column('mw_web_server', 'jsv_port',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='JSV Port',
               existing_nullable=False)
    op.alter_column('mw_web_server', 'host_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='HOST ID',
               existing_nullable=False)
    op.alter_column('mw_web_server', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Primary Key',
               existing_nullable=False,
               autoincrement=True)
    op.drop_table_comment(
        'mw_web_reverseproxy',
        existing_comment='http.m reverse proxy정보',
        schema=None
    )
    op.alter_column('mw_web_reverseproxy', 'max_connection_count',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Max WebSocketConnections',
               existing_nullable=True)
    op.alter_column('mw_web_reverseproxy', 'target_context_path',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Reverse Proxy target context path',
               existing_nullable=True)
    op.alter_column('mw_web_reverseproxy', 'target_port',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Reverse Proxy target port',
               existing_nullable=True)
    op.alter_column('mw_web_reverseproxy', 'target_ip_address',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Reverse Proxy target ip',
               existing_nullable=True)
    op.alter_column('mw_web_reverseproxy', 'ssl_yn',
               existing_type=postgresql.ENUM('YES', 'NO', name='ynenum'),
               comment=None,
               existing_comment='SSL 인증서 여부',
               existing_nullable=True)
    op.alter_column('mw_web_reverseproxy', 'context_path',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Context Path',
               existing_nullable=True)
    op.alter_column('mw_web_reverseproxy', 'reverseproxy_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='Reverse Proxy ID',
               existing_nullable=False)
    op.alter_column('mw_web_reverseproxy', 'jsv_port',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='JSV Port',
               existing_nullable=False)
    op.alter_column('mw_web_reverseproxy', 'host_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='HOST ID',
               existing_nullable=False)
    op.alter_column('mw_web_reverseproxy', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Primary Key',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('mw_web_reverseproxy_id_seq'::regclass)"))
    op.drop_table_comment(
        'mw_web_change_history',
        existing_comment='WEB 변경 이력',
        schema=None
    )
    op.alter_column('mw_web_change_history', 'changed_object',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='변경 내역',
               existing_nullable=True)
    op.alter_column('mw_web_change_history', 'old_httpm_object',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='변경전 http.m 정보',
               existing_nullable=True)
    op.alter_column('mw_web_change_history', 'jsv_port',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='JSV Port',
               existing_nullable=False)
    op.alter_column('mw_web_change_history', 'host_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='HOST ID',
               existing_nullable=False)
    op.alter_column('mw_web_change_history', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Primary Key',
               existing_nullable=False,
               autoincrement=True)
    op.drop_table_comment(
        'mw_web',
        existing_comment='Web 서버',
        schema=None
    )
    op.alter_column('mw_web', 'httpm_object',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='http.m 전체 정보',
               existing_nullable=True)
    op.alter_column('mw_web', 'tcpgw_object',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='TCP Gateway 정보',
               existing_nullable=True)
    op.alter_column('mw_web', 'ext_object',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='ext 정보',
               existing_nullable=True)
    op.alter_column('mw_web', 'errordocument_object',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='error document 정보',
               existing_nullable=True)
    op.alter_column('mw_web', 'logging_object',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='Logging 정보',
               existing_nullable=True)
    op.alter_column('mw_web', 'ssl_object',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='SSL 인증서 정보',
               existing_nullable=True)
    op.alter_column('mw_web', 'user_name_incharge',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='담당자 이름',
               existing_nullable=True)
    op.alter_column('mw_web', 'standby_host_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='HA구성이 A-S인 경우 StandBy 서버 Host id',
               existing_nullable=True)
    op.alter_column('mw_web', 'running_type',
               existing_type=postgresql.ENUM('AA', 'AS', 'SA', name='runingtypeenum'),
               comment=None,
               existing_comment='HA구성',
               existing_nullable=True)
    op.alter_column('mw_web', 'system_user',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='서버 계정',
               existing_nullable=True)
    op.alter_column('mw_web', 'acc_dir',
               existing_type=sa.VARCHAR(length=200),
               comment=None,
               existing_comment='access log 위치',
               existing_nullable=True)
    op.alter_column('mw_web', 'doc_dir',
               existing_type=sa.VARCHAR(length=200),
               comment=None,
               existing_comment='doc root 위치',
               existing_nullable=True)
    op.alter_column('mw_web', 'web_home',
               existing_type=sa.VARCHAR(length=200),
               comment=None,
               existing_comment='web서버 home',
               existing_nullable=True)
    op.alter_column('mw_web', 'web_name',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='web서버 이름/용도',
               existing_nullable=True)
    op.alter_column('mw_web', 'node_name',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='node name in http.m',
               existing_nullable=True)
    op.alter_column('mw_web', 'service_port',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='http service port',
               existing_nullable=True)
    op.alter_column('mw_web', 'hth_count',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='hth count',
               existing_nullable=True)
    op.alter_column('mw_web', 'newgeneration_yn',
               existing_type=postgresql.ENUM('YES', 'NO', name='ynenum'),
               comment=None,
               existing_comment='차세대여부',
               existing_nullable=True)
    op.alter_column('mw_web', 'landscape',
               existing_type=postgresql.ENUM('PROD', 'TEST', 'DEV', 'DR', name='locationenum'),
               comment=None,
               existing_comment='Landscape',
               existing_nullable=True)
    op.alter_column('mw_web', 'dependent_was_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='Built type이 내장인 경우 종속된 WAS domain id',
               existing_nullable=True)
    op.alter_column('mw_web', 'built_type',
               existing_type=postgresql.ENUM('External', 'Internal', 'Isolated', name='builtenum'),
               comment=None,
               existing_comment='Built Type',
               existing_nullable=True)
    op.alter_column('mw_web', 'jsv_port',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='JSV Port',
               existing_nullable=False)
    op.alter_column('mw_web', 'host_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='HOST ID',
               existing_nullable=False)
    op.alter_column('mw_web', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Primary Key',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('mw_web_id_seq'::regclass)"))
    op.drop_table_comment(
        'mw_was_webtobconnector',
        existing_comment='WAS instance의 webtob connection',
        schema=None
    )
    op.alter_column('mw_was_webtobconnector', 'webtobconnector_object',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='webconnection 정보',
               existing_nullable=True)
    op.alter_column('mw_was_webtobconnector', 'disable_pipe',
               existing_type=postgresql.ENUM('YES', 'NO', name='ynenum'),
               comment=None,
               existing_comment='내장Webtob pipeline사용구분(사용시=false)',
               existing_nullable=True)
    op.alter_column('mw_was_webtobconnector', 'thread_pool_count',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Http Thread 최대개수',
               existing_nullable=True)
    op.alter_column('mw_was_webtobconnector', 'web_reconnect_interval',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Reconnect interval',
               existing_nullable=True)
    op.alter_column('mw_was_webtobconnector', 'web_hth_count',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Web서버 hth 개수',
               existing_nullable=True)
    op.alter_column('mw_was_webtobconnector', 'jsv_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='JSV Id',
               existing_nullable=True)
    op.alter_column('mw_was_webtobconnector', 'jsv_port',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='JSV port',
               existing_nullable=False)
    op.alter_column('mw_was_webtobconnector', 'web_home',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Web서버 local home',
               existing_nullable=True)
    op.alter_column('mw_was_webtobconnector', 'web_host_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='Web서버',
               existing_nullable=True)
    op.alter_column('mw_was_webtobconnector', 'webconnection_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='Web Connector ID',
               existing_nullable=False)
    op.alter_column('mw_was_webtobconnector', 'was_instance_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='WAS instance id',
               existing_nullable=False)
    op.alter_column('mw_was_webtobconnector', 'was_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='WAS domain id',
               existing_nullable=False)
    op.alter_column('mw_was_webtobconnector', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Primary Key',
               existing_nullable=False,
               autoincrement=True)
    op.drop_table_comment(
        'mw_was_instance',
        existing_comment='WAS instance',
        schema=None
    )
    op.alter_column('mw_was_instance', 'clustered_yn',
               existing_type=postgresql.ENUM('YES', 'NO', name='ynenum'),
               comment=None,
               existing_comment='Clustering여부',
               existing_nullable=True)
    op.alter_column('mw_was_instance', 'use_yn',
               existing_type=postgresql.ENUM('YES', 'NO', name='ynenum'),
               comment=None,
               existing_comment='사용여부',
               existing_nullable=False,
               existing_server_default=sa.text("'YES'::ynenum"))
    op.alter_column('mw_was_instance', 'apm_type',
               existing_type=postgresql.ENUM('PHAROS', 'JENNIFER', 'NONE', name='apmenum'),
               comment=None,
               existing_comment='APM 종류',
               existing_nullable=False,
               existing_server_default=sa.text("'NONE'::apmenum"))
    op.alter_column('mw_was_instance', 'engine_command',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='JEUS6 전용 WEBMain.xml 식별정보',
               existing_nullable=True)
    op.alter_column('mw_was_instance', 'log_home',
               existing_type=sa.VARCHAR(length=500),
               comment=None,
               existing_comment='JEUS log home',
               existing_nullable=True)
    op.alter_column('mw_was_instance', 'jvm_option',
               existing_type=sa.VARCHAR(length=2000),
               comment=None,
               existing_comment='JVM Option',
               existing_nullable=True)
    op.alter_column('mw_was_instance', 'file_encoding',
               existing_type=postgresql.ENUM('UTF_8', 'EUC_KR', 'UTF_16', 'ANSI', 'CP949', name='encodingenum'),
               comment=None,
               existing_comment='File Encoding type',
               existing_nullable=True)
    op.alter_column('mw_was_instance', 'max_heap_size',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Max Heap size',
               existing_nullable=True)
    op.alter_column('mw_was_instance', 'min_heap_size',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Min Heap size',
               existing_nullable=True)
    op.alter_column('mw_was_instance', 'host_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='HOST ID',
               existing_nullable=False)
    op.alter_column('mw_was_instance', 'was_instance_name',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='Instance명/업무명',
               existing_nullable=True)
    op.alter_column('mw_was_instance', 'was_instance_port',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='서비스Port',
               existing_nullable=True)
    op.alter_column('mw_was_instance', 'was_instance_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='WAS instance id',
               existing_nullable=False)
    op.alter_column('mw_was_instance', 'was_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='WAS domain id',
               existing_nullable=False)
    op.alter_column('mw_was_instance', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Primary Key',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('mw_was_instance_id_seq'::regclass)"))
    op.drop_table_comment(
        'mw_was_httplistener',
        existing_comment='WAS instance의 http listener',
        schema=None
    )
    op.alter_column('mw_was_httplistener', 'httplistener_object',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='httplistener 정보',
               existing_nullable=True)
    op.alter_column('mw_was_httplistener', 'max_thread_pool_count',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Http Thread max 개수',
               existing_nullable=True)
    op.alter_column('mw_was_httplistener', 'min_thread_pool_count',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Http Thread min 개수',
               existing_nullable=True)
    op.alter_column('mw_was_httplistener', 'listen_port',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='listener port',
               existing_nullable=False)
    op.alter_column('mw_was_httplistener', 'webconnection_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='Web Connector ID',
               existing_nullable=False)
    op.alter_column('mw_was_httplistener', 'was_instance_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='WAS instance id',
               existing_nullable=False)
    op.alter_column('mw_was_httplistener', 'was_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='WAS domain id',
               existing_nullable=False)
    op.alter_column('mw_was_httplistener', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Primary Key',
               existing_nullable=False,
               autoincrement=True)
    op.drop_table_comment(
        'mw_was_change_history',
        existing_comment='WAS 변경 이력',
        schema=None
    )
    op.alter_column('mw_was_change_history', 'changed_object',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='변경 내역',
               existing_nullable=True)
    op.alter_column('mw_was_change_history', 'old_was_object',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='변경전 WAS 정보',
               existing_nullable=True)
    op.alter_column('mw_was_change_history', 'was_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='WAS domain id',
               existing_nullable=False)
    op.alter_column('mw_was_change_history', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Primary Key',
               existing_nullable=False,
               autoincrement=True)
    op.drop_table_comment(
        'mw_was',
        existing_comment='WAS domain',
        schema=None
    )
    op.alter_column('mw_was', 'was_object',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='domain.xml 또는 JEUSMain.xml 전체 정보',
               existing_nullable=True)
    op.alter_column('mw_was', 'cluster_object',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='Clustering 정보',
               existing_nullable=True)
    op.alter_column('mw_was', 'user_name_incharge',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='담당자 이름',
               existing_nullable=True)
    op.alter_column('mw_was', 'system_user',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='서버 계정',
               existing_nullable=True)
    op.alter_column('mw_was', 'located_host_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='설치서버',
               existing_nullable=False)
    op.alter_column('mw_was', 'standby_host_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='HA구성이 A-S인 경우 StandBy 서버 Host id',
               existing_nullable=True)
    op.alter_column('mw_was', 'running_type',
               existing_type=postgresql.ENUM('AA', 'AS', 'SA', name='runingtypeenum'),
               comment=None,
               existing_comment='HA구성',
               existing_nullable=True)
    op.alter_column('mw_was', 'landscape',
               existing_type=postgresql.ENUM('PROD', 'TEST', 'DEV', 'DR', name='locationenum'),
               comment=None,
               existing_comment='Landscape',
               existing_nullable=True)
    op.alter_column('mw_was', 'log_home',
               existing_type=sa.VARCHAR(length=200),
               comment=None,
               existing_comment='JEUS log home',
               existing_nullable=True)
    op.alter_column('mw_was', 'was_home',
               existing_type=sa.VARCHAR(length=200),
               comment=None,
               existing_comment='JEUS home',
               existing_nullable=True)
    op.alter_column('mw_was', 'adminserver_name',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='adminserver 이름',
               existing_nullable=True)
    op.alter_column('mw_was', 'newgeneration_yn',
               existing_type=postgresql.ENUM('YES', 'NO', name='ynenum'),
               comment=None,
               existing_comment='차세대여부',
               existing_nullable=True)
    op.alter_column('mw_was', 'was_name',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='WAS 이름/용도',
               existing_nullable=True)
    op.alter_column('mw_was', 'was_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='WAS domain id',
               existing_nullable=False)
    op.alter_column('mw_was', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Primary Key',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('mw_was_id_seq'::regclass)"))
    op.drop_table_comment(
        'mw_server',
        existing_comment='Server Master',
        schema=None
    )
    op.alter_column('mw_server', 'vip_address',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='접근 가능한 모든 IP address들',
               existing_nullable=True)
    op.alter_column('mw_server', 'ip_address',
               existing_type=sa.VARCHAR(length=20),
               comment=None,
               existing_comment='IP address',
               existing_nullable=True)
    op.alter_column('mw_server', 'encoding',
               existing_type=postgresql.ENUM('UTF_8', 'EUC_KR', 'UTF_16', 'ANSI', 'CP949', name='encodingenum'),
               comment=None,
               existing_comment='엔코딩',
               existing_nullable=True)
    op.alter_column('mw_server', 'os_type',
               existing_type=postgresql.ENUM('AIX', 'LINUX', 'WINDOWS', 'HPUX', 'ETC', name='osenum'),
               comment=None,
               existing_comment='OS 종류',
               existing_nullable=True)
    op.alter_column('mw_server', 'landscape',
               existing_type=postgresql.ENUM('PROD', 'TEST', 'DEV', 'DR', name='locationenum'),
               comment=None,
               existing_comment='Landscape',
               existing_nullable=True)
    op.alter_column('mw_server', 'host_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='HOST ID',
               existing_nullable=False)
    op.alter_column('mw_server', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Primary Key',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('mw_server_id_seq'::regclass)"))
    op.drop_table_comment(
        'mw_datasource',
        existing_comment='WAS의 Datasource',
        schema=None
    )
    op.alter_column('mw_datasource', 'db_pool_period',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='DB Pool Period',
               existing_nullable=True)
    op.alter_column('mw_datasource', 'db_pool_step',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='DB Pool Step',
               existing_nullable=True)
    op.alter_column('mw_datasource', 'db_pool_max',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='DB Pool Max',
               existing_nullable=True)
    op.alter_column('mw_datasource', 'db_pool_min',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='DB Pool Min',
               existing_nullable=True)
    op.alter_column('mw_datasource', 'stmt_query_timeout',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='SQL timeout',
               existing_nullable=True)
    op.alter_column('mw_datasource', 'db_property',
               existing_type=sa.VARCHAR(length=1000),
               comment=None,
               existing_comment='DBMS 접속정보',
               existing_nullable=True)
    op.alter_column('mw_datasource', 'db_user_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='DBMS user',
               existing_nullable=True)
    op.alter_column('mw_datasource', 'db_dbms_id',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='DBMS id',
               existing_nullable=True)
    op.alter_column('mw_datasource', 'db_server_port',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='DB Service port',
               existing_nullable=True)
    op.alter_column('mw_datasource', 'db_server_name',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='DB Server',
               existing_nullable=True)
    op.alter_column('mw_datasource', 'vender_name',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='Vendor',
               existing_nullable=True)
    op.alter_column('mw_datasource', 'datasource_class_name',
               existing_type=sa.VARCHAR(length=200),
               comment=None,
               existing_comment='JDBC Class',
               existing_nullable=True)
    op.alter_column('mw_datasource', 'datasource_type',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='Datasource Type',
               existing_nullable=True)
    op.alter_column('mw_datasource', 'db_jndi_id',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='Export(JNDI) 이름',
               existing_nullable=True)
    op.alter_column('mw_datasource', 'datasource_id',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='Datasource id',
               existing_nullable=False)
    op.alter_column('mw_datasource', 'was_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='WAS domain id',
               existing_nullable=False)
    op.alter_column('mw_datasource', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Primary Key',
               existing_nullable=False,
               autoincrement=True)
    op.drop_table_comment(
        'mw_biz_category',
        existing_comment='KDB Application code',
        schema=None
    )
    op.alter_column('mw_biz_category', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Primary Key',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('mw_biz_category_id_seq'::regclass)"))
    op.drop_table_comment(
        'mw_application',
        existing_comment='WAS에 deploy된 Application',
        schema=None
    )
    op.alter_column('mw_application', 'deploy_type',
               existing_type=postgresql.ENUM('WAR', 'EAR', 'JAR', 'COMPONENT', 'EXPLODED', name='warenum'),
               comment=None,
               existing_comment='배포Type',
               existing_nullable=True)
    op.alter_column('mw_application', 'context_path',
               existing_type=sa.VARCHAR(length=200),
               comment=None,
               existing_comment='Context Path',
               existing_nullable=True)
    op.alter_column('mw_application', 'application_home',
               existing_type=sa.VARCHAR(length=200),
               comment=None,
               existing_comment='Application 배포 위치',
               existing_nullable=True)
    op.alter_column('mw_application', 'application_desc',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='Application 설명',
               existing_nullable=True)
    op.alter_column('mw_application', 'application_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='Application id',
               existing_nullable=False)
    op.alter_column('mw_application', 'was_id',
               existing_type=sa.VARCHAR(length=30),
               comment=None,
               existing_comment='WAS domain id',
               existing_nullable=False)
    op.alter_column('mw_application', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Primary Key',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('mw_application_id_seq'::regclass)"))
    op.drop_table_comment(
        'mo_was_status_template',
        existing_comment='WAS instance 상태 report template',
        schema=None
    )
    op.drop_table_comment(
        'mo_was_status_report',
        existing_comment='WAS instance 상태 report',
        schema=None
    )
    op.drop_table_comment(
        'mo_was_instance_status',
        existing_comment='WAS instance 상태',
        schema=None
    )
    # ### end Alembic commands ###
