"""empty message

Revision ID: 13bded0cc4d4
Revises: d8cdc6f97128
Create Date: 2022-07-13 16:22:33.630027

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '13bded0cc4d4'
down_revision = 'd8cdc6f97128'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('ag_result_command_id_agent_id_repetition_seq_fkey', 'ag_result', type_='foreignkey')
    op.create_foreign_key(None, 'ag_result', 'ag_command_detail', ['command_id', 'agent_id', 'repetition_seq'], ['command_id', 'agent_id', 'repetition_seq'], ondelete='CASCADE')
    op.drop_constraint('mw_application_was_id_fkey', 'mw_application', type_='foreignkey')
    op.create_foreign_key(None, 'mw_application', 'mw_was', ['was_id'], ['was_id'], ondelete='CASCADE')
    op.drop_constraint('mw_datasource_was_id_fkey', 'mw_datasource', type_='foreignkey')
    op.create_foreign_key(None, 'mw_datasource', 'mw_was', ['was_id'], ['was_id'], ondelete='CASCADE')
    op.drop_constraint('mw_was_change_history_was_id_fkey', 'mw_was_change_history', type_='foreignkey')
    op.create_foreign_key(None, 'mw_was_change_history', 'mw_was', ['was_id'], ['was_id'], ondelete='CASCADE')
    op.drop_constraint('mw_was_httplistener_was_id_was_instance_id_fkey', 'mw_was_httplistener', type_='foreignkey')
    op.create_foreign_key(None, 'mw_was_httplistener', 'mw_was_instance', ['was_id', 'was_instance_id'], ['was_id', 'was_instance_id'], ondelete='CASCADE')
    op.drop_constraint('mw_was_instance_was_id_fkey', 'mw_was_instance', type_='foreignkey')
    op.create_foreign_key(None, 'mw_was_instance', 'mw_was', ['was_id'], ['was_id'], ondelete='CASCADE')
    op.drop_constraint('mw_was_webtobconnector_was_id_was_instance_id_fkey', 'mw_was_webtobconnector', type_='foreignkey')
    op.create_foreign_key(None, 'mw_was_webtobconnector', 'mw_was_instance', ['was_id', 'was_instance_id'], ['was_id', 'was_instance_id'], ondelete='CASCADE')

    #drop mw_web foreignkey 
    op.drop_constraint('mw_web_change_history_host_id_jsv_port_fkey', 'mw_web_change_history', type_='foreignkey')
    op.drop_constraint('mw_web_domain_host_id_jsv_port_vhost_id_fkey', 'mw_web_domain', type_='foreignkey')
    op.drop_constraint('mw_web_reverseproxy_host_id_jsv_port_fkey', 'mw_web_reverseproxy', type_='foreignkey')
    op.drop_constraint('mw_web_server_host_id_jsv_port_fkey', 'mw_web_server', type_='foreignkey')
    op.drop_constraint('mw_web_ssl_host_id_jsv_port_fkey', 'mw_web_ssl', type_='foreignkey')
    op.drop_constraint('mw_web_uri_host_id_jsv_port_fkey', 'mw_web_uri', type_='foreignkey')
    op.drop_constraint('mw_web_vhost_host_id_jsv_port_fkey', 'mw_web_vhost', type_='foreignkey')
    
    op.add_column('mw_web', sa.Column('port', sa.Integer(), nullable=True, comment='Port'))
    op.execute("update mw_web set port = cast(case when position(',' in service_port) = 0 then service_port else substring(service_port,0, position(',' in service_port)) end  as integer)")
    op.alter_column('mw_web','port', nullable=False)    
    op.drop_constraint('mw_web_host_id_jsv_port_key', 'mw_web', type_='unique')
    op.create_unique_constraint(None, 'mw_web', ['host_id', 'port'])
    
    op.add_column('mw_web_change_history', sa.Column('mw_web_id', sa.Integer(), nullable=True))
    op.drop_constraint('mw_web_change_history_host_id_jsv_port_create_on_key', 'mw_web_change_history', type_='unique')
    op.create_unique_constraint(None, 'mw_web_change_history', ['mw_web_id', 'create_on'])
    op.create_foreign_key(None, 'mw_web_change_history', 'mw_web', ['mw_web_id'], ['id'], ondelete='CASCADE')
    op.drop_column('mw_web_change_history', 'host_id')
    op.drop_column('mw_web_change_history', 'jsv_port')

    op.add_column('mw_web_reverseproxy', sa.Column('mw_web_id', sa.Integer(), nullable=True))
    op.drop_constraint('mw_web_reverseproxy_host_id_jsv_port_reverseproxy_id_key', 'mw_web_reverseproxy', type_='unique')
    op.execute("update mw_web_reverseproxy a set mw_web_id = (select id from mw_web where host_id = a.host_id and jsv_port = a.jsv_port)")
    op.alter_column('mw_web_reverseproxy','mw_web_id', nullable=False)
    op.create_unique_constraint(None, 'mw_web_reverseproxy', ['mw_web_id', 'reverseproxy_id'])
    op.create_foreign_key(None, 'mw_web_reverseproxy', 'mw_web', ['mw_web_id'], ['id'], ondelete='CASCADE')
    op.drop_column('mw_web_reverseproxy', 'host_id')
    op.drop_column('mw_web_reverseproxy', 'jsv_port')

    op.add_column('mw_web_server', sa.Column('mw_web_id', sa.Integer(), nullable=True))
    op.drop_constraint('mw_web_server_host_id_jsv_port_svr_id_key', 'mw_web_server', type_='unique')
    op.execute("update mw_web_server a set mw_web_id = (select id from mw_web where host_id = a.host_id and jsv_port = a.jsv_port)")
    op.alter_column('mw_web_server','mw_web_id', nullable=False)
    op.create_unique_constraint(None, 'mw_web_server', ['mw_web_id', 'svr_id'])
    op.create_foreign_key(None, 'mw_web_server', 'mw_web', ['mw_web_id'], ['id'], ondelete='CASCADE')
    op.drop_column('mw_web_server', 'host_id')
    op.drop_column('mw_web_server', 'jsv_port')

    op.add_column('mw_web_ssl', sa.Column('mw_web_id', sa.Integer(), nullable=True))
    op.drop_constraint('mw_web_ssl_host_id_jsv_port_ssl_name_key', 'mw_web_ssl', type_='unique')
    op.execute("update mw_web_ssl a set mw_web_id = (select id from mw_web where host_id = a.host_id and jsv_port = a.jsv_port)")
    op.alter_column('mw_web_ssl','mw_web_id', nullable=False)
    op.create_unique_constraint(None, 'mw_web_ssl', ['mw_web_id', 'ssl_name'])
    op.create_foreign_key(None, 'mw_web_ssl', 'mw_web', ['mw_web_id'], ['id'], ondelete='CASCADE')
    op.drop_column('mw_web_ssl', 'jsv_port')

    op.add_column('mw_web_uri', sa.Column('mw_web_id', sa.Integer(), nullable=True))
    op.drop_constraint('mw_web_uri_host_id_jsv_port_uri_id_key', 'mw_web_uri', type_='unique')
    op.execute("update mw_web_uri a set mw_web_id = (select id from mw_web where host_id = a.host_id and jsv_port = a.jsv_port)")
    op.alter_column('mw_web_uri','mw_web_id', nullable=False)
    op.create_unique_constraint(None, 'mw_web_uri', ['mw_web_id', 'uri_id'])
    op.create_foreign_key(None, 'mw_web_uri', 'mw_web', ['mw_web_id'], ['id'], ondelete='CASCADE')
    op.drop_column('mw_web_uri', 'host_id')
    op.drop_column('mw_web_uri', 'jsv_port')

    op.add_column('mw_web_vhost', sa.Column('mw_web_id', sa.Integer(), nullable=True))
    op.drop_constraint('mw_web_vhost_host_id_jsv_port_vhost_id_key', 'mw_web_vhost', type_='unique')
    op.execute("update mw_web_vhost a set mw_web_id = (select id from mw_web where host_id = a.host_id and jsv_port = a.jsv_port)")
    op.alter_column('mw_web_vhost','mw_web_id', nullable=False)
    op.create_unique_constraint(None, 'mw_web_vhost', ['mw_web_id', 'vhost_id'])
    op.create_foreign_key(None, 'mw_web_vhost', 'mw_web', ['mw_web_id'], ['id'], ondelete='CASCADE')
    op.drop_column('mw_web_vhost', 'host_id')
    op.drop_column('mw_web_vhost', 'jsv_port')

    op.add_column('mw_web_domain', sa.Column('mw_web_vhost_id', sa.Integer(), nullable=True))
    op.drop_constraint('mw_web_domain_host_id_jsv_port_vhost_id_domain_name_port_key', 'mw_web_domain', type_='unique')
    #op.execute("update mw_web_domain a set mw_web_vhost_id = (select id from mw_web_vhost where host_id = a.host_id and jsv_port = a.jsv_port and vhost_id = a.vhost_id)")
    #op.alter_column('mw_web_domain','mw_web_vhost_id', nullable=False)
    #op.create_unique_constraint(None, 'mw_web_domain', ['mw_web_vhost_id', 'domain_name', 'port'])
    #op.create_foreign_key(None, 'mw_web_domain', 'mw_web_vhost', ['mw_web_vhost_id'], ['id'], ondelete='CASCADE')
    #op.drop_column('mw_web_domain', 'vhost_id')
    #op.drop_column('mw_web_domain', 'jsv_port')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('mw_web_vhost', sa.Column('jsv_port', sa.INTEGER(), autoincrement=False, nullable=False, comment='JSV Port'))
    op.add_column('mw_web_vhost', sa.Column('host_id', sa.VARCHAR(length=30), autoincrement=False, nullable=False, comment='HOST ID'))
    op.drop_constraint(None, 'mw_web_vhost', type_='foreignkey')
    op.create_foreign_key('mw_web_vhost_host_id_jsv_port_fkey', 'mw_web_vhost', 'mw_web', ['host_id', 'jsv_port'], ['host_id', 'jsv_port'])
    op.drop_constraint(None, 'mw_web_vhost', type_='unique')
    op.create_unique_constraint('mw_web_vhost_host_id_jsv_port_vhost_id_key', 'mw_web_vhost', ['host_id', 'jsv_port', 'vhost_id'])
    op.drop_column('mw_web_vhost', 'mw_web_id')
    op.add_column('mw_web_uri', sa.Column('jsv_port', sa.INTEGER(), autoincrement=False, nullable=False, comment='JSV Port'))
    op.add_column('mw_web_uri', sa.Column('host_id', sa.VARCHAR(length=30), autoincrement=False, nullable=False, comment='HOST ID'))
    op.drop_constraint(None, 'mw_web_uri', type_='foreignkey')
    op.create_foreign_key('mw_web_uri_host_id_jsv_port_fkey', 'mw_web_uri', 'mw_web', ['host_id', 'jsv_port'], ['host_id', 'jsv_port'])
    op.drop_constraint(None, 'mw_web_uri', type_='unique')
    op.create_unique_constraint('mw_web_uri_host_id_jsv_port_uri_id_key', 'mw_web_uri', ['host_id', 'jsv_port', 'uri_id'])
    op.drop_column('mw_web_uri', 'mw_web_id')
    op.add_column('mw_web_ssl', sa.Column('jsv_port', sa.INTEGER(), autoincrement=False, nullable=False, comment='JSV Port'))
    op.drop_constraint(None, 'mw_web_ssl', type_='foreignkey')
    op.create_foreign_key('mw_web_ssl_host_id_jsv_port_fkey', 'mw_web_ssl', 'mw_web', ['host_id', 'jsv_port'], ['host_id', 'jsv_port'])
    op.drop_constraint(None, 'mw_web_ssl', type_='unique')
    op.create_unique_constraint('mw_web_ssl_host_id_jsv_port_ssl_name_key', 'mw_web_ssl', ['host_id', 'jsv_port', 'ssl_name'])
    op.drop_column('mw_web_ssl', 'mw_web_id')
    op.add_column('mw_web_server', sa.Column('jsv_port', sa.INTEGER(), autoincrement=False, nullable=False, comment='JSV Port'))
    op.add_column('mw_web_server', sa.Column('host_id', sa.VARCHAR(length=30), autoincrement=False, nullable=False, comment='HOST ID'))
    op.drop_constraint(None, 'mw_web_server', type_='foreignkey')
    op.create_foreign_key('mw_web_server_host_id_jsv_port_fkey', 'mw_web_server', 'mw_web', ['host_id', 'jsv_port'], ['host_id', 'jsv_port'])
    op.drop_constraint(None, 'mw_web_server', type_='unique')
    op.create_unique_constraint('mw_web_server_host_id_jsv_port_svr_id_key', 'mw_web_server', ['host_id', 'jsv_port', 'svr_id'])
    op.drop_column('mw_web_server', 'mw_web_id')
    op.add_column('mw_web_reverseproxy', sa.Column('jsv_port', sa.INTEGER(), autoincrement=False, nullable=False, comment='JSV Port'))
    op.add_column('mw_web_reverseproxy', sa.Column('host_id', sa.VARCHAR(length=30), autoincrement=False, nullable=False, comment='HOST ID'))
    op.drop_constraint(None, 'mw_web_reverseproxy', type_='foreignkey')
    op.create_foreign_key('mw_web_reverseproxy_host_id_jsv_port_fkey', 'mw_web_reverseproxy', 'mw_web', ['host_id', 'jsv_port'], ['host_id', 'jsv_port'])
    op.drop_constraint(None, 'mw_web_reverseproxy', type_='unique')
    op.create_unique_constraint('mw_web_reverseproxy_host_id_jsv_port_reverseproxy_id_key', 'mw_web_reverseproxy', ['host_id', 'jsv_port', 'reverseproxy_id'])
    op.drop_column('mw_web_reverseproxy', 'mw_web_id')
    op.add_column('mw_web_domain', sa.Column('jsv_port', sa.INTEGER(), autoincrement=False, nullable=False, comment='JSV Port'))
    op.add_column('mw_web_domain', sa.Column('vhost_id', sa.VARCHAR(length=30), autoincrement=False, nullable=False, comment='Virtual Host ID'))
    op.drop_constraint(None, 'mw_web_domain', type_='foreignkey')
    op.create_foreign_key('mw_web_domain_host_id_jsv_port_vhost_id_fkey', 'mw_web_domain', 'mw_web_vhost', ['host_id', 'jsv_port', 'vhost_id'], ['host_id', 'jsv_port', 'vhost_id'])
    op.drop_constraint(None, 'mw_web_domain', type_='unique')
    op.create_unique_constraint('mw_web_domain_host_id_jsv_port_vhost_id_domain_name_port_key', 'mw_web_domain', ['host_id', 'jsv_port', 'vhost_id', 'domain_name', 'port'])
    op.drop_column('mw_web_domain', 'mw_web_vhost_id')
    op.add_column('mw_web_change_history', sa.Column('jsv_port', sa.INTEGER(), autoincrement=False, nullable=False, comment='JSV Port'))
    op.add_column('mw_web_change_history', sa.Column('host_id', sa.VARCHAR(length=30), autoincrement=False, nullable=False, comment='HOST ID'))
    op.drop_constraint(None, 'mw_web_change_history', type_='foreignkey')
    op.create_foreign_key('mw_web_change_history_host_id_jsv_port_fkey', 'mw_web_change_history', 'mw_web', ['host_id', 'jsv_port'], ['host_id', 'jsv_port'])
    op.drop_constraint(None, 'mw_web_change_history', type_='unique')
    op.create_unique_constraint('mw_web_change_history_host_id_jsv_port_create_on_key', 'mw_web_change_history', ['host_id', 'jsv_port', 'create_on'])
    op.drop_column('mw_web_change_history', 'mw_web_id')
    op.drop_constraint(None, 'mw_web', type_='unique')
    op.create_unique_constraint('mw_web_host_id_jsv_port_key', 'mw_web', ['host_id', 'jsv_port'])
    op.drop_column('mw_web', 'port')
    op.drop_constraint(None, 'mw_was_webtobconnector', type_='foreignkey')
    op.create_foreign_key('mw_was_webtobconnector_was_id_was_instance_id_fkey', 'mw_was_webtobconnector', 'mw_was_instance', ['was_id', 'was_instance_id'], ['was_id', 'was_instance_id'])
    op.drop_constraint(None, 'mw_was_instance', type_='foreignkey')
    op.create_foreign_key('mw_was_instance_was_id_fkey', 'mw_was_instance', 'mw_was', ['was_id'], ['was_id'])
    op.drop_constraint(None, 'mw_was_httplistener', type_='foreignkey')
    op.create_foreign_key('mw_was_httplistener_was_id_was_instance_id_fkey', 'mw_was_httplistener', 'mw_was_instance', ['was_id', 'was_instance_id'], ['was_id', 'was_instance_id'])
    op.drop_constraint(None, 'mw_was_change_history', type_='foreignkey')
    op.create_foreign_key('mw_was_change_history_was_id_fkey', 'mw_was_change_history', 'mw_was', ['was_id'], ['was_id'])
    op.drop_constraint(None, 'mw_datasource', type_='foreignkey')
    op.create_foreign_key('mw_datasource_was_id_fkey', 'mw_datasource', 'mw_was', ['was_id'], ['was_id'])
    op.drop_constraint(None, 'mw_application', type_='foreignkey')
    op.create_foreign_key('mw_application_was_id_fkey', 'mw_application', 'mw_was', ['was_id'], ['was_id'])
    op.drop_constraint(None, 'ag_result', type_='foreignkey')
    op.create_foreign_key('ag_result_command_id_agent_id_repetition_seq_fkey', 'ag_result', 'ag_command_detail', ['command_id', 'agent_id', 'repetition_seq'], ['command_id', 'agent_id', 'repetition_seq'])
    # ### end Alembic commands ###
